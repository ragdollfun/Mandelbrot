-- -------------------------------------------------------------
-- 
-- File Name: C:\Users\Petr\AppData\Local\Temp\mlhdlc_mandelbrot_calculator\codegen\mandelbrot_calculator\hdlsrc\mandelbrot_calculator.vhd
-- Created: 2021-06-14 01:17:11
-- 
-- Generated by MATLAB 9.10, MATLAB Coder 5.2 and HDL Coder 3.18
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: mandelbrot_calculator
-- Source Path: mandelbrot_calculator
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY mandelbrot_calculator IS
  PORT( clk                               :   IN    std_logic;
        rst                               :   IN    std_logic;
        start                             :   IN    std_logic;
        c_real                            :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        c_imaginary                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        ready                             :   OUT   std_logic;
        finished                          :   OUT   std_logic;
        z_real                            :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        z_imaginary                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En12
        iterations                        :   OUT   std_logic_vector(6 DOWNTO 0)  -- ufix7
        );
END mandelbrot_calculator;


ARCHITECTURE rtl OF mandelbrot_calculator IS

  -- Signals
  SIGNAL c_real_signed                    : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL c_imaginary_signed               : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL z_real_tmp_1                     : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL z_imaginary_tmp                  : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL iterations_tmp                   : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mandelbrot_calculator_ready_state : std_logic;
  SIGNAL mandelbrot_calculator_start_state : std_logic;
  SIGNAL mandelbrot_calculator_finished_state : std_logic;
  SIGNAL mandelbrot_calculator_c_real_reg : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mandelbrot_calculator_c_imaginary_reg : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mandelbrot_calculator_z_real_reg : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mandelbrot_calculator_z_imaginary_reg : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL mandelbrot_calculator_iterations_reg : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mandelbrot_calculator_r_reg : unsigned(15 DOWNTO 0);  -- ufix16
  SIGNAL mandelbrot_calculator_ready_state_next : std_logic;
  SIGNAL mandelbrot_calculator_start_state_next : std_logic;
  SIGNAL mandelbrot_calculator_finished_state_next : std_logic;
  SIGNAL mandelbrot_calculator_c_real_reg_next : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL mandelbrot_calculator_c_imaginary_reg_next : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL mandelbrot_calculator_z_real_reg_next : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL mandelbrot_calculator_z_imaginary_reg_next : signed(15 DOWNTO 0);  -- sfix16_En12
  SIGNAL mandelbrot_calculator_iterations_reg_next : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL mandelbrot_calculator_r_reg_next : unsigned(15 DOWNTO 0);  -- ufix16_En10

BEGIN
  c_real_signed <= signed(c_real);

  c_imaginary_signed <= signed(c_imaginary);

  mandelbrot_calculator_1_process : PROCESS (clk)
  BEGIN
    IF rising_edge(clk) THEN
      IF rst = '1' THEN
        mandelbrot_calculator_ready_state <= '1';
        mandelbrot_calculator_start_state <= '0';
        mandelbrot_calculator_finished_state <= '0';
        mandelbrot_calculator_c_real_reg <= to_signed(16#0000#, 16);
        mandelbrot_calculator_c_imaginary_reg <= to_signed(16#0000#, 16);
        mandelbrot_calculator_z_real_reg <= to_signed(16#0000#, 16);
        mandelbrot_calculator_z_imaginary_reg <= to_signed(16#0000#, 16);
        mandelbrot_calculator_iterations_reg <= to_unsigned(16#00#, 7);
        mandelbrot_calculator_r_reg <= to_unsigned(16#0000#, 16);
      ELSE 
        mandelbrot_calculator_ready_state <= mandelbrot_calculator_ready_state_next;
        mandelbrot_calculator_start_state <= mandelbrot_calculator_start_state_next;
        mandelbrot_calculator_finished_state <= mandelbrot_calculator_finished_state_next;
        mandelbrot_calculator_c_real_reg <= mandelbrot_calculator_c_real_reg_next;
        mandelbrot_calculator_c_imaginary_reg <= mandelbrot_calculator_c_imaginary_reg_next;
        mandelbrot_calculator_z_real_reg <= mandelbrot_calculator_z_real_reg_next;
        mandelbrot_calculator_z_imaginary_reg <= mandelbrot_calculator_z_imaginary_reg_next;
        mandelbrot_calculator_iterations_reg <= mandelbrot_calculator_iterations_reg_next;
        mandelbrot_calculator_r_reg <= mandelbrot_calculator_r_reg_next;
      END IF;
    END IF;
  END PROCESS mandelbrot_calculator_1_process;

  mandelbrot_calculator_1_output : PROCESS (c_imaginary_signed, c_real_signed, mandelbrot_calculator_c_imaginary_reg,
       mandelbrot_calculator_c_real_reg,
       mandelbrot_calculator_finished_state,
       mandelbrot_calculator_iterations_reg,
       mandelbrot_calculator_r_reg,
       mandelbrot_calculator_ready_state,
       mandelbrot_calculator_start_state,
       mandelbrot_calculator_z_imaginary_reg,
       mandelbrot_calculator_z_real_reg, start)
    VARIABLE z_real_tmp : signed(15 DOWNTO 0);
    VARIABLE ready_state_temp : std_logic;
    VARIABLE finished_state_temp : std_logic;
    VARIABLE z_imaginary_reg_temp : signed(15 DOWNTO 0);
    VARIABLE iterations_reg_temp : unsigned(6 DOWNTO 0);
    VARIABLE mul_temp : signed(31 DOWNTO 0);
    VARIABLE sub_cast : signed(32 DOWNTO 0);
    VARIABLE mul_temp_0 : signed(31 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(32 DOWNTO 0);
    VARIABLE sub_temp : signed(32 DOWNTO 0);
    VARIABLE add_cast : signed(33 DOWNTO 0);
    VARIABLE add_cast_0 : signed(33 DOWNTO 0);
    VARIABLE add_temp : signed(33 DOWNTO 0);
    VARIABLE cast : signed(18 DOWNTO 0);
    VARIABLE cast_0 : signed(17 DOWNTO 0);
    VARIABLE mul_temp_1 : signed(33 DOWNTO 0);
    VARIABLE add_cast_1 : signed(34 DOWNTO 0);
    VARIABLE add_cast_2 : signed(34 DOWNTO 0);
    VARIABLE add_temp_0 : signed(34 DOWNTO 0);
    VARIABLE mul_temp_2 : signed(31 DOWNTO 0);
    VARIABLE add_cast_3 : signed(32 DOWNTO 0);
    VARIABLE mul_temp_3 : signed(31 DOWNTO 0);
    VARIABLE add_cast_4 : signed(32 DOWNTO 0);
    VARIABLE add_temp_1 : signed(32 DOWNTO 0);
  BEGIN
    mul_temp := to_signed(0, 32);
    mul_temp_0 := to_signed(0, 32);
    sub_temp := to_signed(0, 33);
    add_temp := to_signed(0, 34);
    mul_temp_1 := to_signed(0, 34);
    add_temp_0 := to_signed(0, 35);
    mul_temp_2 := to_signed(0, 32);
    mul_temp_3 := to_signed(0, 32);
    add_temp_1 := to_signed(0, 33);
    sub_cast := to_signed(0, 33);
    sub_cast_0 := to_signed(0, 33);
    add_cast := to_signed(0, 34);
    add_cast_0 := to_signed(0, 34);
    cast := to_signed(16#00000#, 19);
    cast_0 := to_signed(16#00000#, 18);
    add_cast_1 := to_signed(0, 35);
    add_cast_2 := to_signed(0, 35);
    add_cast_3 := to_signed(0, 33);
    add_cast_4 := to_signed(0, 33);
    ready_state_temp := mandelbrot_calculator_ready_state;
    finished_state_temp := mandelbrot_calculator_finished_state;
    z_real_tmp := mandelbrot_calculator_z_real_reg;
    z_imaginary_reg_temp := mandelbrot_calculator_z_imaginary_reg;
    iterations_reg_temp := mandelbrot_calculator_iterations_reg;
    mandelbrot_calculator_start_state_next <= mandelbrot_calculator_start_state;
    mandelbrot_calculator_c_real_reg_next <= mandelbrot_calculator_c_real_reg;
    mandelbrot_calculator_c_imaginary_reg_next <= mandelbrot_calculator_c_imaginary_reg;
    mandelbrot_calculator_r_reg_next <= mandelbrot_calculator_r_reg;
    IF mandelbrot_calculator_ready_state = '1' THEN 
      IF start = '1' THEN 
        ready_state_temp := '0';
        mandelbrot_calculator_start_state_next <= '1';
        finished_state_temp := '0';
        mandelbrot_calculator_c_real_reg_next <= c_real_signed;
        mandelbrot_calculator_c_imaginary_reg_next <= c_imaginary_signed;
        z_real_tmp := to_signed(16#0000#, 16);
        z_imaginary_reg_temp := to_signed(16#0000#, 16);
        iterations_reg_temp := to_unsigned(16#00#, 7);
        mandelbrot_calculator_r_reg_next <= to_unsigned(16#0000#, 16);
      END IF;
    ELSIF mandelbrot_calculator_start_state = '1' THEN 
      IF (mandelbrot_calculator_r_reg <= to_unsigned(16#1000#, 16)) AND (mandelbrot_calculator_iterations_reg < to_unsigned(16#64#, 7)) THEN 
        mul_temp := mandelbrot_calculator_z_real_reg * mandelbrot_calculator_z_real_reg;
        sub_cast := resize(mul_temp, 33);
        mul_temp_0 := mandelbrot_calculator_z_imaginary_reg * mandelbrot_calculator_z_imaginary_reg;
        sub_cast_0 := resize(mul_temp_0, 33);
        sub_temp := sub_cast - sub_cast_0;
        add_cast := resize(sub_temp, 34);
        add_cast_0 := resize(mandelbrot_calculator_c_real_reg & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34);
        add_temp := add_cast + add_cast_0;
        z_real_tmp := add_temp(27 DOWNTO 12);
        cast := resize(mandelbrot_calculator_z_real_reg & '0', 19);
        cast_0 := cast(17 DOWNTO 0);
        mul_temp_1 := cast_0 * mandelbrot_calculator_z_imaginary_reg;
        add_cast_1 := resize(mul_temp_1, 35);
        add_cast_2 := resize(mandelbrot_calculator_c_imaginary_reg & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 35);
        add_temp_0 := add_cast_1 + add_cast_2;
        z_imaginary_reg_temp := add_temp_0(27 DOWNTO 12);
        mul_temp_2 := z_real_tmp * z_real_tmp;
        add_cast_3 := resize(mul_temp_2, 33);
        mul_temp_3 := z_imaginary_reg_temp * z_imaginary_reg_temp;
        add_cast_4 := resize(mul_temp_3, 33);
        add_temp_1 := add_cast_3 + add_cast_4;
        mandelbrot_calculator_r_reg_next <= unsigned(add_temp_1(29 DOWNTO 14));
        iterations_reg_temp := mandelbrot_calculator_iterations_reg + to_unsigned(16#01#, 7);
      ELSE 
        ready_state_temp := '0';
        mandelbrot_calculator_start_state_next <= '0';
        finished_state_temp := '1';
      END IF;
    ELSIF mandelbrot_calculator_finished_state = '1' THEN 
      IF start = '1' THEN 
        ready_state_temp := '1';
        mandelbrot_calculator_start_state_next <= '0';
        finished_state_temp := '0';
      END IF;
    ELSE 
      ready_state_temp := '1';
      mandelbrot_calculator_start_state_next <= '0';
      finished_state_temp := '0';
      mandelbrot_calculator_c_real_reg_next <= to_signed(16#0000#, 16);
      mandelbrot_calculator_c_imaginary_reg_next <= to_signed(16#0000#, 16);
      z_real_tmp := to_signed(16#0000#, 16);
      z_imaginary_reg_temp := to_signed(16#0000#, 16);
      iterations_reg_temp := to_unsigned(16#00#, 7);
      mandelbrot_calculator_r_reg_next <= to_unsigned(16#0000#, 16);
    END IF;
    ready <= ready_state_temp;
    finished <= finished_state_temp;
    z_real_tmp_1 <= z_real_tmp;
    z_imaginary_tmp <= z_imaginary_reg_temp;
    IF iterations_reg_temp >= to_unsigned(16#64#, 7) THEN 
      iterations_tmp <= to_unsigned(16#00#, 7);
    ELSE 
      iterations_tmp <= iterations_reg_temp;
    END IF;
    mandelbrot_calculator_ready_state_next <= ready_state_temp;
    mandelbrot_calculator_finished_state_next <= finished_state_temp;
    mandelbrot_calculator_z_real_reg_next <= z_real_tmp;
    mandelbrot_calculator_z_imaginary_reg_next <= z_imaginary_reg_temp;
    mandelbrot_calculator_iterations_reg_next <= iterations_reg_temp;
  END PROCESS mandelbrot_calculator_1_output;


  z_real <= std_logic_vector(z_real_tmp_1);

  z_imaginary <= std_logic_vector(z_imaginary_tmp);

  iterations <= std_logic_vector(iterations_tmp);

END rtl;

